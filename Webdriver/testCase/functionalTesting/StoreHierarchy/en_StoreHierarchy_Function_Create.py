from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re
from Webdriver.all_globals import *

class EnStoreHierarchyFunctionCreate(unittest.TestCase):
    def setUp(self):
        gb_setUp(self)
    
    def test_en_store_hierarchy_function_create(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/storehierarchy")
#Test create company
        try: self.assertNotIn(u"newCompany", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertNotIn(u"newStoreGroup", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertNotIn(u"newTestStore", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))

        driver.find_element_by_id("newCompany").click()
#Verify the elements in 'Store group/Company Options' window
        try: self.assertIn(u"Store Group/Company options", driver.find_element_by_id("title").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"Name:", driver.find_element_by_class_name("pop-up-body").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"Store Group/Company options", driver.find_element_by_id("title").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "rename"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Change type:", driver.find_element_by_css_selector("b > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Store", driver.find_element_by_css_selector("label.labels").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("StoreGroup", driver.find_element_by_xpath("//span[@id='hierarchyItemTypeSelector']/label[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Company", driver.find_element_by_xpath("//span[@id='hierarchyItemTypeSelector']/label[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "amCompany"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "button.exit"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "renameOK"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Close", driver.find_element_by_css_selector("button.exit").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Save", driver.find_element_by_id("renameOK").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("rename").clear()
        driver.find_element_by_id("rename").send_keys("newCompany")
        driver.find_element_by_id("renameOK").click()
        #driver.find_element_by_css_selector("button.exit").click()
#Verify if new Company successfully created.
        #try: self.assertIn(u"newCompany", driver.find_element_by_class_name("genericBrowser").text)
        #except AssertionError as e: self.verificationErrors.append(str(e))
        #driver.refresh()
        #try: self.assertIn(u"newCompany", driver.find_element_by_class_name("genericBrowser").text)
        #except AssertionError as e: self.verificationErrors.append(str(e))
#Test create Store Group
        driver.find_element_by_id("newStoreGroup").click()
#Verify the elements in 'Store group/Company Options' window
        try: self.assertEqual("Store Group/Company options", driver.find_element_by_css_selector("span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Name:", driver.find_element_by_css_selector("span.name").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "rename"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Change type:", driver.find_element_by_css_selector("b > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("StoreGroup", driver.find_element_by_xpath("//span[@id='hierarchyItemTypeSelector']/label[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "button.exit"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Close", driver.find_element_by_css_selector("button.exit").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "renameOK"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Save", driver.find_element_by_id("renameOK").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "img.exit"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("rename").clear()
        driver.find_element_by_id("rename").send_keys("newStoreGroup")
        driver.find_element_by_id("renameOK").click()
        #driver.find_element_by_css_selector("button.exit").click()
#Verify if new Store Group successfully created.
        #try: self.assertIn(u"newStoreGroup", driver.find_element_by_class_name("genericBrowser").text)
        #except AssertionError as e: self.verificationErrors.append(str(e))
        #driver.refresh()
        #try: self.assertIn(u"newStoreGroup", driver.find_element_by_class_name("genericBrowser").text)
        #except AssertionError as e: self.verificationErrors.append(str(e))
#Test create Store:
        driver.find_element_by_id("newStore").click()
#Verify the elements in 'Store group/Company Options' window
        try: self.assertEqual("Store Group/Company options", driver.find_element_by_css_selector("span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Name:", driver.find_element_by_css_selector("span.name").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "rename"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Time Zone:", driver.find_element_by_css_selector("div.timeZone > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "selectTimeZone"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Day", driver.find_element_by_css_selector("td").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Sun", driver.find_element_by_css_selector("label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Mon", driver.find_element_by_css_selector("#storeHours_Monday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Tues", driver.find_element_by_css_selector("#storeHours_Tuesday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Wed", driver.find_element_by_css_selector("#storeHours_Wednesday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Thur", driver.find_element_by_css_selector("#storeHours_Thursday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Fri", driver.find_element_by_css_selector("#storeHours_Friday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Sat", driver.find_element_by_css_selector("#storeHours_Saturday > td.storeHoursDayFields > label").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[2]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Power Up", driver.find_element_by_xpath("//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[3]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Opening Hours", driver.find_element_by_xpath("//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[4]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Closing Hours", driver.find_element_by_xpath("//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[4]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[5]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Power Down", driver.find_element_by_xpath("//div[@id='storeHoursOptionsInsidePopup']/table/tbody/tr/td[5]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Sunday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Monday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Tuesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Wednesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Thursday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Friday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerUp_Saturday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Sunday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Monday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Tuesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Wednesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Thursday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Friday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_openingHours_Saturday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Sunday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Monday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Tuesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Wednesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Thursday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Friday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_closingHours_Saturday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Store Hierarchy", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Store Hierarchy", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Sunday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Monday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Tuesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Wednesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Thursday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Friday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Saturday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "span.timeEntry_wrap"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Monday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Wednesday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Thursday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Friday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Saturday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Sunday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Monday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Tuesday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Wednesday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Thursday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Friday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Saturday']/td[3]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Sunday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Monday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Tuesday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Wednesday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Thursday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Friday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Saturday']/td[4]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Sunday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#storeHours_Tuesday > td.storeHoursFields > span.timeEntry_wrap > span.timeEntry_control"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Monday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Tuesday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Wednesday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Thursday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Friday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//tr[@id='storeHours_Saturday']/td[5]/span/span"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Sunday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Sunday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Monday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Monday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Tuesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Tuesday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Wednesday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Wednesday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Thursday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Thursday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Friday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("repeat", driver.find_element_by_id("repeatStoreHourRow_Friday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "repeatStoreHourRow_Saturday"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Change type:", driver.find_element_by_css_selector("b > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Store", driver.find_element_by_css_selector("label.labels").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("StoreGroup", driver.find_element_by_xpath("//span[@id='hierarchyItemTypeSelector']/label[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Company", driver.find_element_by_xpath("//span[@id='hierarchyItemTypeSelector']/label[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "button.exit"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Close", driver.find_element_by_css_selector("button.exit").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "renameOK"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Save", driver.find_element_by_id("renameOK").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "hr"))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='pop-up']/div[2]/div/hr[2]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
#Test the function:
        driver.find_element_by_id("rename").clear()
        driver.find_element_by_id("rename").send_keys("newTestStore")
        Select(driver.find_element_by_id("selectTimeZone")).select_by_visible_text("(GMT -5:00) Eastern Time (US & Canada), Bogota, Lima")
        driver.find_element_by_id("storeHours_powerUp_Sunday").clear()
        driver.find_element_by_id("storeHours_powerUp_Sunday").send_keys("01:00")
        driver.find_element_by_id("storeHours_openingHours_Sunday").clear()
        driver.find_element_by_id("storeHours_openingHours_Sunday").send_keys("03:00")
        driver.find_element_by_id("storeHours_closingHours_Sunday").clear()
        driver.find_element_by_id("storeHours_closingHours_Sunday").send_keys("06:00")
        driver.find_element_by_id("storeHours_powerDown_Sunday").clear()
        driver.find_element_by_id("storeHours_powerDown_Sunday").send_keys("09:00")
        driver.find_element_by_id("repeatStoreHourRow_Sunday").click()
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Sunday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Monday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Tuesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Wednesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Thursday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Friday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("01:00", driver.find_element_by_id("storeHours_powerUp_Saturday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Sunday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Monday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Tuesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Wednesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Thursday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Friday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("03:00", driver.find_element_by_id("storeHours_openingHours_Saturday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Sunday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Monday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Tuesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Wednesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Thursday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Friday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("06:00", driver.find_element_by_id("storeHours_closingHours_Saturday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Store Hierarchy", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Monday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_id("storeHours_powerDown_Tuesday").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Tuesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Wednesday"))
        self.assertTrue(self.is_element_present(By.ID, "storeHours_powerDown_Wednesday"))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Wednesday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Thursday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Friday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Saturday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("storeHours_powerDown_Sunday").clear()
        driver.find_element_by_id("storeHours_powerDown_Sunday").send_keys("09:00")
        try: self.assertEqual("09:00", driver.find_element_by_id("storeHours_powerDown_Sunday").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("renameOK").click()

        #driver.find_element_by_css_selector("button.exit").click()
        #try: self.assertIn(u"newTestStore", driver.find_element_by_class_name("genericBrowser").text)
        #except AssertionError as e: self.verificationErrors.append(str(e))
        driver.refresh()
        self.driver.implicitly_wait(300)
        try: self.assertIn(u"newCompany", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"newStoreGroup", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"newTestStore", driver.find_element_by_class_name("genericBrowser").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
